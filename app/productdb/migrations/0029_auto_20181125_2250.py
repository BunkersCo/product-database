# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-11-25 21:50
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('productdb', '0028_auto_20180312_2105'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductIdNormalizationRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.CharField(blank=True, help_text='Normalized Product ID that should be used', max_length=255, null=True, verbose_name='Product ID')),
                ('regex_match', models.CharField(blank=True, help_text='Condition for a given input to match the Product ID', max_length=255, null=True, verbose_name='RegEx to Match')),
                ('comment', models.CharField(blank=True, help_text='Rule comment', max_length=4096, null=True, verbose_name='Comment')),
                ('priority', models.IntegerField(default=500, help_text='priority of the rule', verbose_name='Priority')),
                ('vendor', models.ForeignKey(help_text='Vendor where the rule should apply', on_delete=django.db.models.deletion.CASCADE, to='productdb.Vendor', verbose_name='Vendor')),
            ],
            options={
                'verbose_name': 'Product ID Normalization Rule',
                'verbose_name_plural': 'Product ID Normalization Rules',
                'ordering': ['priority', 'product_id'],
            },
        ),
        migrations.AlterModelOptions(
            name='product',
            options={'ordering': ('product_id',), 'verbose_name': 'Product', 'verbose_name_plural': 'Products'},
        ),
        migrations.AlterModelOptions(
            name='productcheck',
            options={'verbose_name': 'Product Check', 'verbose_name_plural': 'Product Checks'},
        ),
        migrations.AlterModelOptions(
            name='productcheckentry',
            options={'verbose_name': 'Product Check Entry', 'verbose_name_plural': 'Product Check Entries'},
        ),
        migrations.AlterModelOptions(
            name='productgroup',
            options={'verbose_name': 'Product Group', 'verbose_name_plural': 'Product Groups'},
        ),
        migrations.AlterModelOptions(
            name='productlist',
            options={'ordering': ('name',), 'verbose_name': 'Product List', 'verbose_name_plural': 'Product Lists'},
        ),
        migrations.AlterModelOptions(
            name='productmigrationoption',
            options={'ordering': ['-migration_source__preference'], 'verbose_name': 'Product Migration Option', 'verbose_name_plural': 'Product Migration Options'},
        ),
        migrations.AlterModelOptions(
            name='productmigrationsource',
            options={'ordering': ['-preference', 'name'], 'verbose_name': 'Product Migration Source', 'verbose_name_plural': 'Product Migration Sources'},
        ),
        migrations.AlterField(
            model_name='product',
            name='description',
            field=models.TextField(blank=True, default='', help_text='description of the product', null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='eox_update_time_stamp',
            field=models.DateField(blank=True, help_text='Indicates that the product has lifecycle data and when they were updated. If no EoL announcement date is set but an update timestamp, the product is considered as not EoL/EoS.', null=True, verbose_name='EoX lifecycle data timestamp'),
        ),
        migrations.AlterField(
            model_name='product',
            name='tags',
            field=models.TextField(blank=True, default='', help_text='unstructured tag field', null=True, verbose_name='Tags'),
        ),
        migrations.AlterUniqueTogether(
            name='productidnormalizationrule',
            unique_together=set([('vendor', 'product_id', 'regex_match')]),
        ),
    ]
