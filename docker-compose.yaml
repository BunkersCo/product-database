#
# the value of the INSTANCE_CONFIG is used to identify the correct environment file located at
#   env.INSTANCE_CONFIG (default to demo)
#
version: '3'

services:
  redis:
    container_name: ${COMPOSE_PROJECT_NAME:-productdb}_redis
    restart: always
    image: redis:4
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - internal

  database:
    container_name: ${COMPOSE_PROJECT_NAME:-productdb}_database
    restart: always
    image: productdb/database:latest
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-postgres
    env_file: env.${INSTANCE_CONFIG:-demo}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backups
    networks:
      - internal

  build_deps:
    container_name: ${COMPOSE_PROJECT_NAME:-productdb}_build_deps
    image: productdb/build_deps:latest
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-build_deps
    env_file: env.${INSTANCE_CONFIG:-demo}
    volumes:
      - static_files:/var/www/productdb/static
      - ssl_files:/var/www/productdb/ssl
      - data:/var/www/productdb/data
      - logs:/var/www/productdb/logs
    networks:
      - default
      - internal

  camera:
    container_name: ${COMPOSE_PROJECT_NAME:-productdb}_camera
    restart: always
    image: productdb/camera:latest
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-camera
    env_file: env.${INSTANCE_CONFIG:-demo}
    networks:
      - internal
    volumes:
      - data:/var/www/productdb/data
      - logs:/var/www/productdb/logs
    depends_on:
      - build_deps
      - database
      - redis

  beat:
    container_name: ${COMPOSE_PROJECT_NAME:-productdb}_beat
    restart: always
    image: productdb/beat:latest
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-beat
    env_file: env.${INSTANCE_CONFIG:-demo}
    networks:
      - default
      - internal
    volumes:
      - data:/var/www/productdb/data
      - logs:/var/www/productdb/logs
    depends_on:
      - build_deps
      - database
      - redis

  worker:
    restart: always
    image: productdb/worker:latest
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-worker
    env_file: env.${INSTANCE_CONFIG:-demo}
    networks:
      - default
      - internal
    volumes:
      - data:/var/www/productdb/data
      - logs:/var/www/productdb/logs
    depends_on:
      - build_deps
      - database
      - redis
      - beat

  web:
    restart: always
    image: productdb/web:latest
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-web
    env_file: env.${INSTANCE_CONFIG:-demo}
    networks:
      - default
      - internal
    volumes:
      - data:/var/www/productdb/data
      - logs:/var/www/productdb/logs
    depends_on:
      - build_deps
      - database
      - redis

  nginx:
    container_name: ${COMPOSE_PROJECT_NAME:-productdb}_nginx
    restart: always
    image: productdb/nginx:stable
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-nginx
    env_file: env.${INSTANCE_CONFIG:-demo}
    ports:
      - "${EXPOSE_IP:-0.0.0.0}:${NGINX_HTTP_PORT:-80}:80"
      - "${EXPOSE_IP:-0.0.0.0}:${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - default
    volumes:
      - static_files:/var/www/productdb/static:ro
      - ssl_files:/var/www/productdb/ssl:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - logs:/var/www/productdb/logs
    depends_on:
      - build_deps
      - web

networks:
  default:
  internal:
    driver: bridge

volumes:
  postgres_data:
  static_files:
  ssl_files:
  data:
  postgres_backup:
  redis_data:
  logs:
